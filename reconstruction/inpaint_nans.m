function B=inpaint_nans(A,method)[n,m]=size(A);A=A(:);nm=n*m;k=isnan(A(:));nan_list=find(k);known_list=find(~k);nan_count=length(nan_list);[nr,nc]=ind2sub([n,m],nan_list);nan_list=[nan_list,nr,nc];if (nargin<2) || isempty(method)  method = 0;elseif ~ismember(method,0:5)  error '{0,1,2,3,4,5}.'endswitch method case 0  if (m == 1) || (n == 1)    work_list = nan_list(:,1);    work_list = unique([work_list;work_list - 1;work_list + 1]);    work_list(work_list <= 1) = [];    work_list(work_list >= nm) = [];    nw = numel(work_list);        u = (1:nw)';    fda = sparse(repmat(u,1,3),bsxfun(@plus,work_list,-1:1), ...      repmat([1 -2 1],nw,1),nw,nm);  else     talks_to = [-1 0;0 -1;1 0;0 1];    neighbors_list=identify_neighbors(n,m,nan_list,talks_to);    all_list=[nan_list;neighbors_list];        L = find((all_list(:,2) > 1) & (all_list(:,2) < n));    nl=length(L);    if nl>0      fda=sparse(repmat(all_list(L,1),1,3), ...        repmat(all_list(L,1),1,3)+repmat([-1 0 1],nl,1), ...        repmat([1 -2 1],nl,1),nm,nm);    else      fda=spalloc(n*m,n*m,size(all_list,1)*5);    end         L = find((all_list(:,3) > 1) & (all_list(:,3) < m));    nl=length(L);    if nl>0      fda=fda+sparse(repmat(all_list(L,1),1,3), ...        repmat(all_list(L,1),1,3)+repmat([-n 0 n],nl,1), ...        repmat([1 -2 1],nl,1),nm,nm);    end  end  rhs=-fda(:,known_list)*A(known_list);  k=find(any(fda(:,nan_list(:,1)),2));  B=A;  B(nan_list(:,1))=fda(k,nan_list(:,1))\rhs(k);   case 1  if (m == 1) || (n == 1)    u = (1:(nm-2))';    fda = sparse(repmat(u,1,3),bsxfun(@plus,u,0:2), ...      repmat([1 -2 1],nm-2,1),nm-2,nm);  else     [i,j]=ndgrid(2:(n-1),1:m);    ind=i(:)+(j(:)-1)*n;    np=(n-2)*m;    fda=sparse(repmat(ind,1,3),[ind-1,ind,ind+1], ...      repmat([1 -2 1],np,1),n*m,n*m);        [i,j]=ndgrid(1:n,2:(m-1));    ind=i(:)+(j(:)-1)*n;    np=n*(m-2);    fda=fda+sparse(repmat(ind,1,3),[ind-n,ind,ind+n], ...      repmat([1 -2 1],np,1),nm,nm);  end    rhs=-fda(:,known_list)*A(known_list);  k=find(any(fda(:,nan_list),2));  B=A;  B(nan_list(:,1))=fda(k,nan_list(:,1))\rhs(k);   case 2  if (m == 1) || (n == 1)     error('Errrrrr')      else    L = find((nan_list(:,2) > 1) & (nan_list(:,2) < n));    nl=length(L);    if nl>0      fda=sparse(repmat(nan_list(L,1),1,3), ...        repmat(nan_list(L,1),1,3)+repmat([-1 0 1],nl,1), ...        repmat([1 -2 1],nl,1),n*m,n*m);    else      fda=spalloc(n*m,n*m,size(nan_list,1)*5);    end    L = find((nan_list(:,3) > 1) & (nan_list(:,3) < m));    nl=length(L);    if nl>0      fda=fda+sparse(repmat(nan_list(L,1),1,3), ...        repmat(nan_list(L,1),1,3)+repmat([-n 0 n],nl,1), ...        repmat([1 -2 1],nl,1),n*m,n*m);    end        if ismember(1,nan_list(:,1))      fda(1,[1 2 n+1])=[-2 1 1];    end    if ismember(n,nan_list(:,1))      fda(n,[n, n-1,n+n])=[-2 1 1];    end    if ismember(nm-n+1,nan_list(:,1))      fda(nm-n+1,[nm-n+1,nm-n+2,nm-n])=[-2 1 1];    end    if ismember(nm,nan_list(:,1))      fda(nm,[nm,nm-1,nm-n])=[-2 1 1];    end        rhs=-fda(:,known_list)*A(known_list);        B=A;    k=nan_list(:,1);    B(k)=fda(k,k)\rhs(k);      end   case 3  talks_to = [-2 0;-1 -1;-1 0;-1 1;0 -2;0 -1; ...      0 1;0 2;1 -1;1 0;1 1;2 0];  neighbors_list=identify_neighbors(n,m,nan_list,talks_to);  all_list=[nan_list;neighbors_list];  L = find( (all_list(:,2) >= 3) & ...            (all_list(:,2) <= (n-2)) & ...            (all_list(:,3) >= 3) & ...            (all_list(:,3) <= (m-2)));  nl=length(L);  if nl>0    fda=sparse(repmat(all_list(L,1),1,13), ...        repmat(all_list(L,1),1,13) + ...        repmat([-2*n,-n-1,-n,-n+1,-2,-1,0,1,2,n-1,n,n+1,2*n],nl,1), ...        repmat([1 2 -8 2 1 -8 20 -8 1 2 -8 2 1],nl,1),nm,nm);  else    fda=spalloc(n*m,n*m,size(all_list,1)*5);  end     L = find((((all_list(:,2) == 2) | ...             (all_list(:,2) == (n-1))) & ...            (all_list(:,3) >= 2) & ...            (all_list(:,3) <= (m-1))) | ...           (((all_list(:,3) == 2) | ...             (all_list(:,3) == (m-1))) & ...            (all_list(:,2) >= 2) & ...            (all_list(:,2) <= (n-1))));  nl=length(L);  if nl>0    fda=fda+sparse(repmat(all_list(L,1),1,5), ...      repmat(all_list(L,1),1,5) + ...        repmat([-n,-1,0,+1,n],nl,1), ...      repmat([1 1 -4 1 1],nl,1),nm,nm);  end    L = find( ((all_list(:,2) == 1) | ...             (all_list(:,2) == n)) & ...            (all_list(:,3) >= 2) & ...            (all_list(:,3) <= (m-1)));  nl=length(L);  if nl>0    fda=fda+sparse(repmat(all_list(L,1),1,3), ...      repmat(all_list(L,1),1,3) + ...        repmat([-n,0,n],nl,1), ...      repmat([1 -2 1],nl,1),nm,nm);  end    L = find( ((all_list(:,3) == 1) | ...             (all_list(:,3) == m)) & ...            (all_list(:,2) >= 2) & ...            (all_list(:,2) <= (n-1)));  nl=length(L);  if nl>0    fda=fda+sparse(repmat(all_list(L,1),1,3), ...      repmat(all_list(L,1),1,3) + ...        repmat([-1,0,1],nl,1), ...      repmat([1 -2 1],nl,1),nm,nm);  end    rhs=-fda(:,known_list)*A(known_list);  k=find(any(fda(:,nan_list(:,1)),2));    B=A;  B(nan_list(:,1))=fda(k,nan_list(:,1))\rhs(k);   case 4  hv_list=[-1 -1 0;1 1 0;-n 0 -1;n 0 1];  hv_springs=[];  for i=1:4    hvs=nan_list+repmat(hv_list(i,:),nan_count,1);    k=(hvs(:,2)>=1) & (hvs(:,2)<=n) & (hvs(:,3)>=1) & (hvs(:,3)<=m);    hv_springs=[hv_springs;[nan_list(k,1),hvs(k,1)]];  end  hv_springs=unique(sort(hv_springs,2),'rows');    nhv=size(hv_springs,1);  springs=sparse(repmat((1:nhv)',1,2),hv_springs, ...     repmat([1 -1],nhv,1),nhv,nm);    rhs=-springs(:,known_list)*A(known_list);    B=A;  B(nan_list(:,1))=springs(:,nan_list(:,1))\rhs;   case 5  fda=spalloc(n*m,n*m,size(nan_list,1)*9);    L = find((nan_list(:,2) > 1) & (nan_list(:,3) > 1));   nl=length(L);  if nl>0    fda=fda+sparse(repmat(nan_list(L,1),1,2), ...      repmat(nan_list(L,1),1,2)+repmat([-n-1, 0],nl,1), ...      repmat([1 -1],nl,1),n*m,n*m);  end    L = find(nan_list(:,3) > 1);  nl=length(L);  if nl>0    fda=fda+sparse(repmat(nan_list(L,1),1,2), ...      repmat(nan_list(L,1),1,2)+repmat([-n, 0],nl,1), ...      repmat([1 -1],nl,1),n*m,n*m);  end  L = find((nan_list(:,2) < n) & (nan_list(:,3) > 1));  nl=length(L);  if nl>0    fda=fda+sparse(repmat(nan_list(L,1),1,2), ...      repmat(nan_list(L,1),1,2)+repmat([-n+1, 0],nl,1), ...      repmat([1 -1],nl,1),n*m,n*m);  end  L = find(nan_list(:,2) > 1);  nl=length(L);  if nl>0    fda=fda+sparse(repmat(nan_list(L,1),1,2), ...      repmat(nan_list(L,1),1,2)+repmat([-1, 0],nl,1), ...      repmat([1 -1],nl,1),n*m,n*m);  end  L = find(nan_list(:,2) < n);  nl=length(L);  if nl>0    fda=fda+sparse(repmat(nan_list(L,1),1,2), ...      repmat(nan_list(L,1),1,2)+repmat([1, 0],nl,1), ...      repmat([1 -1],nl,1),n*m,n*m);  end  L = find((nan_list(:,2) > 1) & (nan_list(:,3) < m));   nl=length(L);  if nl>0    fda=fda+sparse(repmat(nan_list(L,1),1,2), ...      repmat(nan_list(L,1),1,2)+repmat([n-1, 0],nl,1), ...      repmat([1 -1],nl,1),n*m,n*m);  end  L = find(nan_list(:,3) < m);  nl=length(L);  if nl>0    fda=fda+sparse(repmat(nan_list(L,1),1,2), ...      repmat(nan_list(L,1),1,2)+repmat([n, 0],nl,1), ...      repmat([1 -1],nl,1),n*m,n*m);  end  L = find((nan_list(:,2) < n) & (nan_list(:,3) < m));  nl=length(L);  if nl>0    fda=fda+sparse(repmat(nan_list(L,1),1,2), ...      repmat(nan_list(L,1),1,2)+repmat([n+1, 0],nl,1), ...      repmat([1 -1],nl,1),n*m,n*m);  end  rhs=-fda(:,known_list)*A(known_list);    B=A;  k=nan_list(:,1);  B(k)=fda(k,k)\rhs(k);  endB=reshape(B,n,m);function neighbors_list=identify_neighbors(n,m,nan_list,talks_to)if ~isempty(nan_list)  nan_count=size(nan_list,1);  talk_count=size(talks_to,1);    nn=zeros(nan_count*talk_count,2);  j=[1,nan_count];  for i=1:talk_count    nn(j(1):j(2),:)=nan_list(:,2:3) + ...        repmat(talks_to(i,:),nan_count,1);    j=j+nan_count;  end    L = (nn(:,1)<1)|(nn(:,1)>n)|(nn(:,2)<1)|(nn(:,2)>m);   nn(L,:)=[];    neighbors_list=[sub2ind([n,m],nn(:,1),nn(:,2)),nn];     neighbors_list=unique(neighbors_list,'rows');     neighbors_list=setdiff(neighbors_list,nan_list,'rows');  else  neighbors_list=[];end